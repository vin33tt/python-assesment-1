# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C2XhU5Q-zIuNmC4xW2oK6dRRYD5_Mn7v
"""

#1
import numpy as np
def rgb_to_grayscale(rgb_image):
    grayscale_image = np.dot(rgb_image[...,:3], [0.2989, 0.5870, 0.1140])
    return grayscale_image

rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
                      [[127, 127, 127], [208, 200, 200], [50, 50, 50]]])

gray = rgb_to_grayscale(rgb_image)
print(gray)

#2
import numpy as np

def normalize_data(data):
    mean = np.mean(data, axis=0)
    std_dev = np.std(data, axis=0)
    normalized_data = (data - mean) / std_dev
    return normalized_data

h = np.array([[5, 10, 15], [20, 25, 30], [35, 40, 45]])
n = normalize_data(h)
print(n)

#3
import numpy as np
s1 = np.array([[1, 2], [3, 4]])
s2 = np.array([[5, 6], [7, 8]])
s3 = np.array([[9, 10], [11, 12]])

data_array = np.array([s1, s2, s3])
flattened_data = [s.flatten() for s in data_array]
concatenated_data = np.concatenate(flattened_data)
reshaped_array = concatenated_data.reshape(data_array.shape[0], -1)

print(reshaped_array)

#4
import numpy as np
s = np.random.randint(0, 100, size=(5, 10))

f = s[:, 0]
l = s[:, -1]

improvement = l - f
print(improvement)

#5
import numpy as np

scores_array = np.array([[-1, 95, 92, 60, 90, 91],
    [80, 85, 85, 90, 90, -1]])

la = scores_array[:, -3:]
masked_scores = np.ma.masked_equal(la, -1)
aver = np.mean(masked_scores, axis=1)
print(aver)

#6
import numpy as np

def apply(td, af):
    af = af[:, np.newaxis]
    atd = td * af
     return atd

td = np.random.randint(0, 40, size=(10, 12))
af = np.random.uniform(0.9, 1.1, size=12)

atd = apply(td, af)
print(atd)

#7
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}

f = [(name, city) for name, age, city, department in zip(data['Name'], data['Age'], data['City'], data['Department']) if age < 45 and department != 'HR']
for name, city in f:
    print(f"Name: {name}, City: {city}")

#8
import pandas as pd
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'barries', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)
fruit_avg_price = df[df['Category'] == 'Fruit']['Price'].mean()

pp = df[(df['Category'] == 'Fruit') & (df['Price'] > fruit_avg_price) & (~df['Promotion'])]
print(pp[['Product', 'Price']])

#9
import pandas as pd
employee_data = {'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']}

project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']}

employee_df = pd.DataFrame(employee_data)
project_df = pd.DataFrame(project_data)
merged_df = pd.merge(project_df, employee_df, on='Employee', how='left')
print(merged_df)

#10
import pandas as pd

data = {
    'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
    'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Sales': [70000, 50000, 30000, 40000, 60000]
}

df = pd.DataFrame(data)
a = df.groupby('Department')['Sales'].mean()
r = a.sort_values(ascending=False)

print("Avg sales per salesperson in each department")
print(a)
print("Ranking of departments based on avg sales")
print(r)