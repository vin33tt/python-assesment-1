# -*- coding: utf-8 -*-
"""LVADSUSR132ASSESSMENT2LAB1ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KgqJeivPLJehS9PDzj2FkSBlo9wufX9W
"""

#Q1
import pandas as pd
df = pd.read_csv('/content/winequality-red.csv')
df.info()

import pandas as pd
import numpy as np
from scipy.stats import zscore

missing_values = df.isnull().sum()
print("Missing Values:")
print(missing_values)

numerical_columns = df.select_dtypes(include=np.number).columns
for col in numerical_columns:
    df[col].fillna(df[col].mean(), inplace=True)

z_scores = zscore(df[numerical_columns])
abs_z_scores = np.abs(z_scores)
threshold = 3
outliers = (abs_z_scores > threshold).any(axis=1)

for col in numerical_columns:
    df[col][outliers] = df[col].mean()

new_z_scores = zscore(df[numerical_columns])
new_abs_z_scores = np.abs(new_z_scores)
outliers_removed = (new_abs_z_scores > threshold).any(axis=1)
print("Outliers Removed:", outliers_removed.sum())

def transform_quality(quality):
    if quality in range(3, 7):
        return "Bad"
    elif quality in range(7, 9):
        return "Good"
    else:
        return "Undefined"
df['Class'] = df['quality'].apply(transform_quality)

print(df.head())

import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import RandomOverSampler
from sklearn.preprocessing import LabelEncoder

target_column = df.columns[-1]

X = df.drop(columns=[target_column])
y = df[target_column]
X_encoded = pd.get_dummies(X)

label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y_encoded, test_size=0.2, random_state=42)
ros = RandomOverSampler()
X_resampled, y_resampled = ros.fit_resample(X_train, y_train)

correlation_matrix = df.corr()
k = 5
relevant_features = correlation_matrix['quality'].sort_values(ascending=False).index[1:k+1]

df.drop_duplicates(inplace=True)
irrelevant_features = ['irrelevant_feature1', 'irrelevant_feature2']
irrelevant_features = [col for col in irrelevant_features if col in df.columns]
df.drop(columns=irrelevant_features, inplace=True)

existing_features = ['existing_feature1', 'existing_feature2']
existing_features = [col for col in existing_features if col in df.columns]
if existing_features:
    df['new_feature'] = df[existing_features[0]] + df[existing_features[1]]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)
print("Shape of X_train:", X_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_test:", y_test.shape)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)
k_values = [3, 5, 7, 9, 11]
best_k = None
best_accuracy = 0.0
for k in k_values:
    knn_classifier = KNeighborsClassifier(n_neighbors=k)
    knn_classifier.fit(X_train_imputed, y_train)
    y_pred = knn_classifier.predict(X_test_imputed)
    accuracy = accuracy_score(y_test, y_pred)
    print("K =", k, "Accuracy:", accuracy)
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_k = k
print("Best K value:", best_k)
print("Best Accuracy:", best_accuracy)

from sklearn.metrics import accuracy_score, precision_score, recall_score, classification_report
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
precision = precision_score(y_test, y_pred, average='weighted')
print("Precision:", precision)

recall = recall_score(y_test, y_pred, average='weighted')
print("Recall:", recall)
print("Classification Report:")
print(classification_report(y_test, y_pred))