# -*- coding: utf-8 -*-
"""LVADSUSR132FINAL-ML-LAB3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12zNF-gHXWOe4nKNHUF4xaIRTYw4xhAoM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA

data= pd.read_csv('/content/seeds.csv')
data.head()

data.info()

data.isnull().sum()

seeds_data=data
seeds_data.dropna(inplace=True)

for col in seeds_data.columns:
    if seeds_data[col].dtype == 'object' and '?' in seeds_data[col].unique():
        seeds_data = seeds_data[seeds_data[col] != '?']
    seeds_data[col] = pd.to_numeric(seeds_data[col], errors='coerce')  # Convert columns to numeric if they were object type

seeds_data.dropna(inplace=True)

plt.figure(figsize=(12, 8))
for i, col in enumerate(seeds_data.columns, 1):
    plt.subplot(3, 3, i)
    sns.histplot(seeds_data[col], kde=True)
    plt.title(col)
plt.tight_layout()
plt.show()

X = seeds_data.copy()
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

inertia = []
silhouette_scores = []
range_values = range(2, 10)
for i in range_values:
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(X_scaled, kmeans.labels_))

plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.plot(range_values, inertia, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.subplot(1, 2, 2)
plt.plot(range_values, silhouette_scores, marker='o')
plt.title('Silhouette Scores')
plt.xlabel('Number of clusters')
plt.ylabel('Silhouette Score')
plt.tight_layout()
plt.show()

optimal_clusters = 3
kmeans_final = KMeans(n_clusters=optimal_clusters, random_state=42)
kmeans_final.fit(X_scaled)

seeds_data['Cluster'] = kmeans_final.labels_

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=kmeans_final.labels_, palette='viridis', s=100, alpha=0.6)
plt.title('Cluster Visualization with PCA')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend(title='Cluster')
plt.show()



