# -*- coding: utf-8 -*-
"""LAB2VINEETKKUMAR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z9wCOmpliOR0xWDbefzlfbcqEY6GPAEb
"""

import pandas as pd
import numpy as np
from scipy.stats import zscore

data = pd.read_csv('/content/booking.csv')

data.fillna(data.median(), inplace=True)
data = data[(np.abs(zscore(data.select_dtypes(include=np.number))) < 3).all(axis=1)]

import pandas as pd

data = pd.read_csv('/content/booking.csv')
data_encoded = pd.get_dummies(data, columns=['type of meal', 'room type','booking status'])
data_encoded.to_csv('encoded_hotel_booking_dataset.csv', index=False)

import pandas as pd
data = pd.read_csv('encoded_hotel_booking_dataset.csv')
feature_correlation = data.corr()[['booking status_Canceled', 'booking status_Not_Canceled']].abs().sort_values(by=['booking status_Canceled', 'booking status_Not_Canceled'], ascending=False)
print("Feature Correlation with Booking Status:\n", feature_correlation)
data.drop_duplicates(inplace=True)
data.drop(['Booking_ID'], axis=1, inplace=True)
data.to_csv('cleaned_hotel_booking_dataset.csv', index=False)

from sklearn.model_selection import train_test_split
import pandas as pd
data = pd.read_csv('cleaned_hotel_booking_dataset.csv')

X = data.drop(['booking status_Canceled', 'booking status_Not_Canceled'], axis=1)
y = data[['booking status_Canceled', 'booking status_Not_Canceled']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("Training set shape:", X_train.shape, y_train.shape)
print("Testing set shape:", X_test.shape, y_test.shape)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import pandas as pd

data = pd.read_csv('cleaned_hotel_booking_dataset.csv')
data['date of reservation'] = pd.to_datetime(data['date of reservation'], errors='coerce')
data['date of reservation'] = data['date of reservation'].fillna('2018-02-28')

data['reservation_day'] = data['date of reservation'].dt.day
data['reservation_month'] = data['date of reservation'].dt.month
data['reservation_year'] = data['date of reservation'].dt.year

data.drop(['date of reservation'], axis=1, inplace=True)
X = data.drop(['booking status_Canceled', 'booking status_Not_Canceled'], axis=1)
y = data['booking status_Canceled']
X_encoded = pd.get_dummies(X, columns=['market segment type'])

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

log_reg_model = LogisticRegression()
log_reg_model.fit(X_train, y_train)

y_pred = log_reg_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Classification Metrics:")
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-score:", f1)
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='g', cmap='Blues', cbar=False,
            xticklabels=['Not Canceled', 'Canceled'], yticklabels=['Not Canceled', 'Canceled'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

