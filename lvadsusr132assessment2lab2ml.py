# -*- coding: utf-8 -*-
"""LVADSUSR132ASSESSMENT2LAB2ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_NZwcP-2Y2XU9_Ap3aFpmqO0HrlTMRYY
"""

#Q2
import pandas as pd
df = pd.read_csv('/content/Mall_Customers.csv')
df.info()

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']] = scaler.fit_transform(df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']])

median_income = df['Annual Income (k$)'].median()
df['Annual Income (k$)'].fillna(median_income, inplace=True)
df['Spending to Income Ratio'] = df['Spending Score (1-100)'] / df['Annual Income (k$)']
print(df.head())

import numpy as np
df.replace([np.inf, -np.inf], np.nan, inplace=True)
median_income = df['Annual Income (k$)'].median()
df['Annual Income (k$)'].fillna(median_income, inplace=True)
scaler = MinMaxScaler()
df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']] = scaler.fit_transform(df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']])

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import SimpleImputer
df.replace([np.inf, -np.inf], np.nan, inplace=True)
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(df)
    wcss.append(kmeans.inertia_)

plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()
sil_scores = []
for n_clusters in range(2, 11):
    kmeans = KMeans(n_clusters=n_clusters, init='k-means++', random_state=42)
    cluster_labels = kmeans.fit_predict(df)
    silhouette_avg = silhouette_score(df, cluster_labels)
    sil_scores.append(silhouette_avg)
plt.plot(range(2, 11), sil_scores)
plt.title('Silhouette Score')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.show()

df.replace([np.inf, -np.inf], np.nan, inplace=True)
imputer = SimpleImputer(strategy='median')
df = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)
scaler = MinMaxScaler()
df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']] = scaler.fit_transform(df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']])
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(df)
    wcss.append(kmeans.inertia_)
optimal_num_clusters = np.argmin(np.diff(wcss)) + 1
kmeans = KMeans(n_clusters=optimal_num_clusters, init='k-means++', random_state=42)
cluster_labels = kmeans.fit_predict(df)

plt.scatter(df['Annual Income (k$)'], df['Spending Score (1-100)'], c=cluster_labels, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', label='Centroids')
plt.title('K-Means Clustering')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()

df['Cluster'] = cluster_labels
cluster_centroids = pd.DataFrame(kmeans.cluster_centers_, columns=df.columns[:-1])
cluster_statistics = df.groupby('Cluster').agg(['mean', 'median', 'std', 'min', 'max'])
for cluster in range(optimal_num_clusters):
    print(f"\nCluster {cluster} Statistics:")
    print(cluster_statistics.loc[cluster])
    print()

"""Strategy development based on Clusters:

1. Targeted Marketing Strategies:

Cluster 0: This cluster may represent customers with high annual income and high spending scores. Targeted marketing strategies could include offering luxury or high-end products/services.
Cluster 1: Customers in this cluster may have moderate annual income and moderate spending scores. Strategies could focus on promoting mid-range products/services.
Cluster 2: This cluster might include customers with low annual income and low spending scores. Marketing efforts could be aimed at budget-friendly products/services.

2. Customer Experience Improvement:

Cluster 0: Enhance the shopping experience for affluent customers by providing personalized recommendations based on past purchases, offering VIP treatment such as priority access or exclusive events.
Cluster 1: Focus on improving customer engagement and loyalty through targeted communication, creating a sense of community or belonging, optimizing product placement and visibility within the store.
Cluster 2: Simplify the shopping experience for budget-conscious customers by clearly indicating prices and discounts, providing easy-to-navigate store layouts, offering flexible payment options.
"""